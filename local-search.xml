<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>翻译-多无人机协同单目SLAM</title>
    <link href="/2023/07/07/%E5%A4%9A%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%8D%8F%E5%90%8C%E5%8D%95%E7%9B%AESLAM/"/>
    <url>/2023/07/07/%E5%A4%9A%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%8D%8F%E5%90%8C%E5%8D%95%E7%9B%AESLAM/</url>
    
    <content type="html"><![CDATA[<h1 id="多无人机协同单目SLAM"><a href="#多无人机协同单目SLAM" class="headerlink" title="多无人机协同单目SLAM"></a>多无人机协同单目SLAM</h1><p>Patrik Schmuck and Margarita Chli Vision for Robotics Lab, ETH Zurich, Switzerland</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>随着单个机器人同步定位和绘图(SLAM)系统的成熟，利用机器人团队协作完成任务的可能性越来越受到人们的关注。从工业检测到考古结构的数字化，协同场景感知和测绘是高效和有效评估的关键。在协作成为可能之前，信息的一致性和透明性构成了关键挑战，本文提出了一种新颖的<strong>集中式协作单目SLAM体系结构</strong>，使用多个小型无人机(UAV)作为<strong>代理</strong>。每个代理都能够独立地探索运行在机载内存有限的SLAM环境中，同时将所有收集到的信息发送到中央服务器，即一个计算资源增加的地面站。<strong>服务器</strong>管理所有代理的构图，检测它们之间的循环闭合，如有必要，触发构图融合、优化并将信息分发回代理。这允许代理将其他代理的观察纳入其<strong>动态SLAM估计</strong>中。我们对提出的框架进行了测试，在手持式实验以及空中、室外任务中使用了基于所谓关键帧的单目SLAM算法作为概念证明，证明了该系统在多无人机场景中的适用性。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>即时定位与地图构建(SLAM)问题是机器人技术的基础，因为自我运动估计和地图构建是实现自主导航的关键。为了便于携带，SLAM 方法通常选择仅依赖于车载传感系统，而排除了依赖于外部跟踪的传感器，如GPS。鉴于传感器能够提供丰富的环境信息，及其便携性和低功耗的特性，由此视觉不足为奇地成为一种非常受欢迎的机载约束平台传感模式，如图1所示的小型无人驾驶航空器(UAVs)。他们的敏捷性和迅速到达偏远地区的能力使得小型的UAVs对于任务非常实用，例如检查，搜索和救援，农作物监测和考古遗址的数字化。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20170.png"></p><blockquote><p>图1：我们的协同SLAM系统正在运行，它结合了来自两个在花园区域上空飞行的UAV（即插图中可见的AscTec近地天体）的信息，为了清晰起见，这里增加了谷歌地球的视图。在估计轨迹（蓝色和黑色）上进行环路闭合检测后，红色地图点（与黑色地图点相反）被两个无人机用于位置跟踪。</p></blockquote><p>随着单目SLAM(如[1])的重要发展，没过多久如[2]能够运行在无人机上的第一个基于视觉的SLAM方法就开始出现，从而为无人机提供基本自主性。关于单架无人机SLAM的文献最多，一些系统研究了从多个机器人代理中融合信息来构建一个单一的全球地图以及代理彼此之间的移动定位。然而，解决多机器人协作SLAM（即定位和构图）的系统很少。由于有可能提高任务的效率，集中式协作SLAM允许在所有代理之间共享任务的工作负载，例如映射环境，同时将计算要求高的任务（例如地图优化）从代理转移到地面站。此外，多个代理的存在可以提高SLAM估计过程的鲁棒性，因为通过跨代理共享信息，每个代理都可以从其他代理的测量中获益。</p><p>但在确保协作SLAM的一致性方面仍存在巨大挑战，其在于如何确保网络连通性、处理时间延迟以及在所有代理和地面站之间实现透明的信息访问。本着这种目标，本文提出了一种功能强大的协同SLAM体系结构，设计用于多个小型无人机，每个无人机配备相同的传感器套件和计算约束处理单元，以及一个具有潜在更多计算能力的中央地面站（“服务器”），它与所有代理进行通信。图1展示了我们的系统运行的快照，在室外环境中使用两架无人机执行协作SLAM。为了确保每个代理可以在不依赖于来自服务器的信息的情况下自主操作，所提出的体系结构允许<strong>在服务器上存储任何不能在代理上处理的信息</strong>以供以后使用，并允许将计算成本较大的任务交给服务器。因此，服务器收集所有代理的经验，并在检测到环路关闭时(无论是在代理的轨迹上还是在其他轨迹上)，合并、优化并将信息分发回重新访问系统已知区域的相关代理。使用一个开源的基于关键帧的单目SLAM算法，我们在室内和室外任务上对所提出的架构进行了深入的实验分析。我们的评估表明，通过所提出的方法在代理之间共享信息不仅可以改善全局地图，而且可以改善代理在移动中的轨迹。为了证明所提出的方法在有效处理真实场景中出现的时间延迟和一致性问题方面的能力，我们使用了<strong>四台无人机</strong>来绘制室外区域地图，并根据徕卡全站仪的准确地面真实位置数据评估估计。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>文献中的一些工作解决了多机器人场景中的定位问题。Martinelli等人[3]使用基于扩展卡尔曼滤波(EKF)的相互观测的相对机器人构形估计。在文[4]中，作者展示了一个由单目摄像机和IMU组成的两架无人机的系统，构成了一个灵活的立体试验平台。然后，在一个简单的实验装置上，该系统被用来估计无人机的相对位姿。Piasco等人[5]基于EKF滤波方案，还使用具有多个无人机的分布式立体视觉系统进行协作定位。</p><p>与协作SLAM密切相关的另一个主题是多机器人协作构图。在[6]中，作者提出了一个地面机器人和无人机的协作地图系统。其他工作，如谷歌的“探戈计划”[7]和郭等人的最新工作[8]并没有直接针对机器人应用场景，而是通过平板电脑或手机等多个<strong>手持平台</strong>收集数据，用这些设备的输入构建通用地图。虽然这些系统以协作的方式处理构图或本地化，但只有少数现有作品显示了能够与多个代理执行协作SLAM的系统。当涉及到实际应用于机器人技术的系统时，文献中通常使用集中式体系结构，然而，一些工作使用分散系统解决协作SLAM，如Cunningham等人[9]，他们提出了一个完全分布式SLAM系统，并在仿真中对其进行了评估。分散系统的最大挑战是，与集中式服务器体系结构相比，确保数据一致性和避免重复计算信息要困难得多。此外，具有<strong>中央服务器</strong>的系统具有这样的优势，即计算成本高的算法（不一定限制实时操作，例如捆绑调整和位置识别）可以在服务器端处理。这使得机器人代理只需将其潜在的有限资源用于执行最关键的任务，如实时视觉里程计。一些成果建议使用云存储数据并在机器人之间共享，而不是使用机器人任务环境中的中央服务器。在[10]中，作者介绍了如何将这种系统用于与低成本地面机器人的协作SLAM。代理<strong>不会看到存储在云中的全局贴图</strong>，<strong>但会从云系统获取代理本地贴图中关键帧的更新关键帧姿势信息作为反馈</strong>。将协作系统的中央服务器的算法移动到<strong>云端</strong>是一个在使用多个代理时特别有吸引力的选择。</p><p>邹和谭[11]介绍了一种协作式单目SLAM系统，重点是处理动态环境。它将来自多个单目摄影机的图像馈送作为输入，并使用位置识别系统将具有场景重叠的摄影机分组。例如，它要求同步摄影机，因为所有摄影机同时捕获关键帧，这限制了代理的自主性。此外，该算法需要一个GPU进行计算，并要求所有摄像机在初始化步骤观察同一场景。这些缺点使得该系统不适用于UAVs。Forster等人[12]展示了一个基于运动管道结构的协作SLAM系统。每个代理在其上运行一个基于关键帧的视觉里程计系统，该系统向中央服务器发送新的关键帧。如果在服务器上找到两个地图之间的对应关系，则会合并地图并进行全局优化。虽然这可能是第一个解决多无人机设置的系统，但<strong>它不会将任何信息发送回代理</strong>，例如，在探索另一个代理过去已经探索过的区域时，因此它可以从优化的地图和姿态估计中获益，并使用来自其他代理的信息增强其地图。“协作SLAM”在文献中使用的意义相当松散，像[12]这样的系统基本上是<strong>协作构图</strong>，而不是协作SLAM，因为服务器上的映射在任何后期都不会用于代理上的姿势跟踪。在[13]中，作者介绍了在图像流上运行PTAM的2台RGB-D摄像机的$$C_2TAM$$，用于SLAM估计，其中仅在代理上执行位置跟踪。<strong>代理将其关键帧发送到服务器，在服务器上执行所有构图任务。然后将完整的构图发送回代理</strong>，以进行进一步的跟踪步骤。这使得系统的使用具有非常有限的计算资源，但是它不允许代理在不依赖服务器的情况下自主操作。此外，虽然PTAM是基于关键帧的SLAM的一项开创性工作，但目前最先进的技术优于它，在更大的领域具有更稳健和更精确的估计。$$C_2TAM$$仅在小型办公环境中进行了测试，重复发送整个地图的假设注定会在更大的区域出现问题。Morrison等人[14]设计了一个用于手持设备的协作SLAM系统。该系统的目标是实现多设备构图。它们对每个代理执行完全SLAM，服务器用作存储和共享代理映射的中央内存。该系统的这种体系结构没有利用协作系统提供的许多优势，因为成本极高的优化算法仍然在代理上运行。服务器检测地图之间的对应关系，但不运行全局优化。Deutsch等人[15]最近的工作提出了一个可以在服务器上运行的系统，能够在协作框架中组合不同的SLAM系统。然而，在这种方法中可以组合的SLAM系统仅限于在姿态图上操作，其中每个关键帧都有一个图像及其链接的绝对比例。例如，这排除了所有纯单目SLAM系统。此外，如[14]中所述，一个完整的SLAM系统在代理上运行。服务器通知代理其姿态图像中的更新，<strong>服务器上的全局构图和其他代理的子图对该代理不可见</strong>。这项工作中介绍的系统<strong>克服了[13]中代理依赖服务器信息进行自主操作的需要</strong>，但仍然将计算成本高昂的任务交给了服务器，并且不像[14]那样在代理上执行完全SLAM。与[12]不同，与[15]和[10]相比，&#x3D;&#x3D;我们将信息从服务器传回代理，并使用其他代理的信息扩充代理的本地构图&#x3D;&#x3D;.</p><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><p>我们的协作SLAM方法的系统架构如图2所示。它包括多个代理，每个代理配备一个单目摄像头，以及一个能够与所有代理通信的中央服务器。任何通信都是通过无线网络建立的。在这种集中式体系结构中，跨代理的所有通信都通过服务器进行。系统不假定对代理的初始配置有任何先验知识。每个代理在其局部里程计框架内运行，该框架的原点位于代理的起始位置。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20171.png"></p><blockquote><p>图2：系统架构概述。代理（例如UAV）运行实时视觉里程计（VO），维护本地地图，以及与服务器交换数据（关键帧（KF）和地图点（MP））的通信模块。服务器是一个地面站，它执行非关键时间且计算代价高昂的算法：位置识别、地图融合和束调整（BA）。</p></blockquote><p>该架构的设计重点在于使每个机器人代理能够运行所有必要的算法，从而为其提供简单的自主权，使其能够在不需要服务器提供任何信息的情况下继续前进。为此，每个代理在单独的线程上运行实时视觉里程计以进行姿势估计，其中包含其周围的局部地图（限于代理附近最近的关键帧）和通信模块，以使两个模块能够并行工作。由于代理的板载计算能力有限，因此在大型环境中运行时，代理无法保留整个地图。在这种情况下，<strong>服务器还充当簿记员，跟踪所有获取的数据</strong>。因此，当返回到以前访问过的位置并检测到回环时，服务器可以向代理提供其本地构图中未包含的过去经验。服务器运行非时间关键且计算代价高昂的算法，包括地图内位置识别、地图间位置识别、不同代理的地图融合以及全局地图优化（捆绑调整–BA）。</p><p>虽然该系统设计用于使用图像特征的任何基于关键帧的SLAM方法，但在这里，我们使用ORB-SLAM2[16]对其进行了测试，该系统是文献中性能最好的单目SLAM系统之一。因此，我们系统的一些构建块（即视觉里程计和位置识别）基于ORB-SLAM2实现，但是它们的描述仍然是通用的，以证明所提议的体系结构的广泛适用性。</p><h3 id="A-视觉里程计（VO）"><a href="#A-视觉里程计（VO）" class="headerlink" title="A. 视觉里程计（VO）"></a>A. 视觉里程计（VO）</h3><blockquote><p>图3：VO系统创建的小姿态图。共享足够多地图点（此处共14个）的关键帧（即节点）是由边所连接的。</p></blockquote><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20172.png"></p><p>传入的摄像机帧由基于基本SLAM方法的视觉里程计（VO）系统处理。该系统的目标是通过跟踪场景地标来计算每一帧相机的运动，这些地标后来在代理的本地地图中用作地图点（MP）。局部地图在姿态图（图3）中保留一系列关键帧（KF），稍后将进行优化。新的MPs通过与他们过去的观测值进行三角测量进入地图。传统上，在基于KF的SLAM中，维护最具代表性的帧（KFs），以减少构图中的数据量以提高计算时间，从而允许实时行为。如果一帧作为KF插入到地图中，决策可以基于例如相对于最后一个插入KF的移动距离或特征点重叠——该决策取决于基本的SLAM方法。</p><p>VO块还包含在单独线程上运行的本地构图，当新KF被VO创建时激活该线程。这建立了每个新KF的姿态图连接，然后将其插入到本地地图中。局部构图可以根据所使用的SLAM系统包括额外的步骤，例如局部优化或搜索当前KF的更多MP匹配。如果两个或两个以上的代理构成服务器端地图堆栈的相同地图，则每个代理的VO运行在合并地图提取的本地副本上，即限制每个本地地图的大小为N个关键帧。这张地图包含了所有参与地图制作的特工的KFs和MP。如果两个代理同时在其本地副本中更改相同的KF或MP，我们使用III-D节中描述的解析方案。与以前使用客户机—服务器体系结构解决协作SLAM的工作不同[10]、[12]、[15]，我们将其他代理创建的KFs和MPs从服务器发送回代理，<strong>从而通过其他代理收集的信息增强代理的本地构图</strong>。这样，代理不仅可以使用自己的地图数据进行姿态跟踪，还可以使用以前访问过同一位置的其他代理的数据。通过这种方式，我们确保不会丢失任何信息，并使协作能够执行SLAM。</p><h3 id="B-代理处理程序"><a href="#B-代理处理程序" class="headerlink" title="B. 代理处理程序"></a>B. 代理处理程序</h3><p>一个代理处理程序用于<strong>连接服务器和代理</strong>。此处理程序运行一个负责与代理进行数据交换的通信模块，地图内位置识别模块检测存储在服务器端的代理地图中的回环（该地图存储所有过去的信息，而不是本地地图。其结构的详细信息见第III-C.2节）。每个代理处理程序在单独的线程上运行地图内位置识别和通信，以允许<strong>不同代理的处理程序独立并行地工作</strong>。处理程序管理到服务器其余模块的链接。此外，它还保存一个Sim（3）转换，将服务器端地图坐标系中的姿态转换为代理端的地图坐标系。代理和服务器之间的Sim（3）—对齐是必要的，因为在地图融合步骤之后，服务器和本地地图上的合并地图的<strong>比例和起始帧可能不同</strong>。</p><h3 id="C-数据结构"><a href="#C-数据结构" class="headerlink" title="C. 数据结构"></a>C. 数据结构</h3><p>1）  局部地图：由基于KF的SLAM生成的姿势图，由代理当前已知的KFs和MPs组成，如图3所示。在大型环境中，局部地图受代理周围环境的限制，以限制板载计算负载。当代理创建KF时，<strong>每个KF都会增加一个全局唯一标识符</strong>。本地地图保存在本地参考系统（VO框架）中。</p><p>2）  服务器构图和全局构图堆栈：构图堆栈包含代理构建的所有图，不受保留最后KFs的限制。相反，所有过去的信息都保存在服务器端的“服务器构图”中。例如，对于四个代理，构图堆栈至少包含一个，最多包含四个服务器构图。启动系统时，<strong>为每个代理初始化一个服务器构图</strong>，仅可由其相应的处理程序访问。当合并构图堆栈中的两个构图时，这些构图将从堆栈中删除，并将由它们的融合产生的新服务器构图添加到堆栈中，并与所有参与的处理程序关联。在地图融合（III-G）中，将合并的两个服务器地图对齐，然后共享一个本地参考帧。因此，系统从不使用全局参考系。</p><p>3）  用于位置识别的关键帧数据库：我们的KF数据库是在运行时从所有获取的KF（即从所有代理）增量构建的。该数据库实现了一个高效的查找过程，允许新的KF查询其他具有相同功能的过去的KF。对于此数据库中的每个KF，将存储有关哪个代理创建此KF的信息。这使得位置识别可以独立于保存KF的地图而查询KF的数据库。</p><h3 id="D-通信"><a href="#D-通信" class="headerlink" title="D. 通信"></a>D. 通信</h3><p>代理或服务器端的通信模块处理它们之间的所有通信。为了交换消息，我们使用<strong>ROS基础设施</strong>[17]。通信模块以预定义的频率运行，确保代理上的一致性和实时行为。对于每次迭代，它都会捆绑所有KF和MPs，这些KF和MPs是自消息中的上次通信以来新创建或更改的，并发布此消息。此外，它还处理信息交换之间的任何消息。对于关联地图中已经存在的MPs和KF，将应用这些更改。对于地图中不存在的MPs和KF，通信模块根据消息构造这些数据结构，在姿态图中建立连接，并将它们插入相应的地图中。这发生在系统的两个点上：在代理上使用来自服务器的信息更新本地构图，或者在服务器上将来自代理的新信息合并到构图堆栈内的相关服务器构图中。在服务器端，通信模块将KFs转发给地图内和地图间位置识别模块。此外，对于传入数据，通信执行多个安全检查以确保服务器和代理上的数据是一致的，这包括例如检查消息是否丢失，以及验证相同的KF或MP没有在构图中插入两次。</p><p>通信是双向的：代理向服务器发送新的、删除的或更改的KFs和MPs。服务器将更改或删除的KF和MPs发送给代理。如果一个代理A与另一个代理B共享构图，则从服务器到代理A的通信还包括代理tB创建的新的、更改的和删除的KF的通信。如果代理和服务器之间发生冲突，例如，因为两者都改变了MP或KF的姿态，我们倾向于从服务器获取信息。由于服务器偶尔对数据执行全局BA，所以我们认为它的信息比代理的信息更精确。由于代理B的数据增加代理A的本地地图，A也可以使用并应用对该数据的更改，例如更改姿态、将MPs添加到KFs或使用VO模块中MPs。在两个代理同时执行更新的情况下，例如，相同KF的姿态，并且没有来自全局BA的高级姿势估计，则使用最新传入的姿态。<strong>使用唯一锁的锁定方案可以防止由于整个系统中的竞争条件而导致的错误</strong>。</p><p>我们以<strong>先进先出</strong>的模式处理传入的KFs和MPs。此外，代理可以独立工作，并且不需要来自服务器的任何反馈来操作。因此，该系统架构不存在由网络延迟或耗时优化步骤引起的问题。虽然信息可能会延迟到达收件人，这可能导致一种情况，即一个代理由于延迟到达而无法使用另一个代理提供的有关其当前位置的信息，但时间延迟不会导致系统崩溃。</p><h3 id="E-束调整——BA"><a href="#E-束调整——BA" class="headerlink" title="E. 束调整——BA"></a>E. 束调整——BA</h3><p>我们使用束调整优化地图堆栈中服务器地图的姿态图。BA通过最小优化中考虑的所有KF和MPs的重投影误差来优化图形。在地图间识别和地图合并之后，我们对姿态图进行了全局7自由度（DoF）优化，以改进图形并减少比例漂移，将所有信息合并到地图中。由于全局BA耗时且计算量大，因此只能在服务器上执行。与要优化的映射相关联的通信模块在优化步骤期间暂停。因此，模块包含输入和输出缓冲区，以确保没有数据丢失。在本文介绍的实验中，<strong>全局BA的实现使用了g2o的Levenberg-Marquardt</strong>实现[18]。</p><h3 id="F-位置识别"><a href="#F-位置识别" class="headerlink" title="F. 位置识别"></a>F. 位置识别</h3><p>位置识别系统检测一个代理是否在其自身或另一个代理过去已经在的位置。因此，它获取一个新到达的KF并在数据库中查询相似的KF，返回一组候选KF，这些候选KF与当前KF共享足够多的公共特征。通过外观和&#x2F;或几何检查（取决于选择的算法）对这些候选项进行评估，最后决定当前KF是否与另一个KF匹配。这种循环闭合检测允许向姿势图添加新的约束，这些约束可用于优化该图，并可显著提高贴图的质量。我们在系统中区分了两个位置识别模块：</p><p>1）  地图内位置识别：KF查询只考虑匹配地图堆栈中同一服务器地图中的KF候选。因此，成功意味着在堆栈的一个服务器构图中添加新的约束。随后，在此地图上执行全局BA。</p><p>2）  地图间位置识别（地图匹配）：测试查询KF是否与来自其他服务器地图的KF匹配。成功意味着在堆栈的两个服务器构图之间有新的约束，然后是构图融合。</p><h3 id="G-地图融合"><a href="#G-地图融合" class="headerlink" title="G. 地图融合"></a>G. 地图融合</h3><p>地图融合模块采用一对匹配的KF（$$K_q$$，$$K_m$$），分别属于两个不同的地图$$M_q$$和$$M_m$$。计算两张地图之间的Sim（3）转换，同时考虑地图的不同比例，将MPs和KFs转换为第三张合并地图的坐标系。姿态图中的新链接来自匹配的KF对。然后运行全局BA以优化整个构图。最后，构图堆栈被更新：$$M_q$$和$$M_m$$从堆栈中删除，$$M_f$$被添加。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>建议的协作SLAM框架在两个不同的场景中进行评估。在实验1中，两个手持代理在室内办公环境中独立移动，而在实验2中，四架无人机（每架无人机配备一个向下看的摄像头）在室外花园区域导航，同时被徕卡全站仪激光跟踪，为每架无人机提供准确的位置地面实况。对于这两个实验，Thinkpad  T460s笔记本电脑的内核为<a href="mailto:&#105;&#55;&#45;&#54;&#54;&#x30;&#x30;&#x55;&#x40;&#50;&#46;&#54;&#48;&#71;&#72;&#x7a;">&#105;&#55;&#45;&#54;&#54;&#x30;&#x30;&#x55;&#x40;&#50;&#46;&#54;&#48;&#71;&#72;&#x7a;</a>×4和20GB  RAM用作服务器。在实验1中，每个代理使用相同的机器，而在实验2中，使用提升技术（图1）提供的配备Intel NUC  5i7RYH的Neo平台。ORB-SLAM2[16]被用作两个实验的基础SLAM系统。因此，视觉里程计和位置识别基于ORB-SLAM2实现。</p><h3 id="实验1：两个手持摄像机、室内环境"><a href="#实验1：两个手持摄像机、室内环境" class="headerlink" title="实验1：两个手持摄像机、室内环境"></a>实验1：两个手持摄像机、室内环境</h3><p>使用两台手持式摄像机作为代理，探索大约50m×25m的办公环境，每个代理的视图如图4a和4b所示。图4c显示了在对平面图尺寸进行比例调整后，在不使用协作SLAM系统的情况下估计的代理A（红色）和代理B（绿色）的叠加轨迹。由于ORB-SLAM2是单目系统，无法恢复比例，因此为了能够分析提出的系统架构，将比例手动安装到平面图上。虽然代理A的较小轨迹与计划相符，但代理B在办公室地板上的移动轨迹较长，因此比代理A更容易发生漂移。这可以在代理B轨迹末端的图4c中看到：代理应已到达指示的真实轨迹末端（绿色虚线），但代理B的估计轨迹在位置1处与墙相交。图4d显示了相同的情况，现在在以下场景中使用建议的协作SLAM方法：首先，代理A的轨迹成功地在位置2关闭了一个回路，随后，代理移动通过办公室楼层。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20173.png"></p><blockquote><p>图4：实验1，展示了两个代理在办公环境中连续移动的轨迹。（a）从代理查看，用于跟踪的场景地标叠加在（b）中。（c）在不使用协作信息的情况下，对代理A（红色）和代理B（绿色）进行轨迹估计。来自代理B的轨迹会发生漂移并与墙相交。绿色虚线表示代理B的真实轨迹。（d） 使用协作SLAM的两个代理的情况相同：在位置（4）的代理A和代理B之间的回路闭合，以优化代理B的轨迹，现在与真实轨迹对齐。</p></blockquote><p>在位置3检测到构图堆栈中两个代理的服务器构图之间的一个匹配，这导致它们合并。当代理B沿着走廊移动到位置4时，地图间地点识别检测到<strong>代理B重新访问代理A以前访问过的地点，并触发全局BA</strong>，从而改善全局地图。现在，代理B估计轨迹的终点与走廊和建筑对齐，并在轨迹的真实终点处结束。改进的姿势估计会传回给两个代理，以便他们可以在运动和地图估计中进一步使用改进的地图估计。</p><p>该实验表明，在两个代理移动时通过服务器共享信息，按照提出的框架，他们能够在任务期间实现全局一致的公共地图，并及时帮助代理方实时进行一致的SLAM估计。与任务结束后对两个代理的经验进行离线处理不同，在该方案中，<strong>代理可以在行动中从彼此的经验中获益</strong>，同时不断确保评估的一致性。</p><h3 id="实验2：无人机群、室外环境"><a href="#实验2：无人机群、室外环境" class="headerlink" title="实验2：无人机群、室外环境"></a>实验2：无人机群、室外环境</h3><p>使用Asctec Neo UAV捕获同一区域的四个数据集，本实验中测试的场景包括四个UAV同时飞越室外花园区域（见图5a和5b），从而并行处理所有捕获的信息。图5c至5h显示了整个实验中构图堆栈的演变。系统启动时，为每个代理初始化一个服务器构图。代理D（绿色）在时间t&#x3D;10[s]开始，代理A（黑色）在t&#x3D;60，代理B（蓝色）在t&#x3D;70，代理C（紫色）在t&#x3D;100。在t&#x3D;80（图5c），未找到服务器构图之间的匹配，因此所有代理仍在其自己的服务器构图上运行。在t&#x3D;80和t&#x3D;85之间（图5d），找到了代理A和代理D的服务器构图之间的一组匹配，这些构图被合并。因此，从现在起，堆栈中只剩下三个构图，同时A和D现在共享一个服务器构图（服务地图AD）。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20174.png"></p><blockquote><p>图5：实验2: 4架无人机同时在一个小公园上空飞行，执行协同SLAM。（a） 谷歌地球上的测试区域俯视图。（b） 无人机视图，场景地标叠加。(c)至(h)包含与代理A和代理D相关的服务器端地图的地图堆栈的演化。开始时，为每个代理生成一个地图。然后，在任务期间，检测地图之间的重叠，并合并地图，最后生成一张包含所有代理的所有信息的地图。</p></blockquote><p>从5c 到5d 的地图融合也显示了协同 SLAM 系统对比例差异的处理:  这两个时间步长之间的轨迹大小比率的变化。因为我们没有先验知识的环境或其他代理，每个代理估计一个不同的比例因素时，启动其SLAM系统。这将导致同一环境的不同大小的地图，因此地图融合执行合并的服务器地图的比例对齐。</p><p>在t&#x3D;85和t&#x3D;100（图5e）之间，找到了服务器B构图和服务器AD构图之间的匹配，从而生成了一个合并的服务器构图。来自代理A、B、D的传入关键帧（KF）。图5f显示了构图堆栈在t&#x3D;150，就在代理C的服务器构图和服务器构图合并之前，结果是一个服务器构图合并了所有代理的KFs（图5g）。图5h显示了实验结束时的构图堆栈，其中包含一个带有所有四个代理轨迹的单服务器构图。图6显示了一个合并的服务器地图，该地图来自代理A和代理B的数据，具有3个自由度位置地面真实度，手动缩放与全局地图对齐。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20175.png"></p><blockquote><p>图6：来自两个代理（蓝色和黑色摄影机截面图）的KFs全球地图和定位地面真相（实线）。</p></blockquote><p>图7显示了如何使用来自代理A的信息扩充代理端的代理B构图。地图包括代理B（纯蓝色）的轨迹，来自代理A的关键帧（黑色摄像机截面）增强了地图，以及代理B（蓝色）和代理A（灰色）的地图点（MPs）。为了可视化来自不同代理的信息，本例中显示了所有KF和MPs，没有忘记地图的任何部分。红色MPs是两个代理的VO使用的MPs，即它们由代理A生成，发送给代理B，然后在下一步中，当VO创建新KF时，代理B的VO使用它们。这表明，我们的系统使代理不仅能够接收由其他代理收集的信息，而且能够在进一步处理中使用这些信息。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20176.png"></p><blockquote><p>图7：代理B（蓝色）在代理端的地图，显示代理的轨迹及其地图点。地图上增加了代理A的KFs（黑色摄影机截面）和MPs（灰色）。红色MPs表示该点被代理A和B的VO用于位置估计。</p></blockquote><h3 id="规模和复杂度"><a href="#规模和复杂度" class="headerlink" title="规模和复杂度"></a>规模和复杂度</h3><p>我们将当前实现中的代理数量限制为四个，但从架构角度来看，我们的系统不受代理数量的限制。本节说明了代理的数量如何影响提出系统的计时行为。我们特别关注通信，因为随着更多代理参与系统，通信工作量会增加。代理上的VO始终保持实时，因为KF的数量是有限制的。表I显示了通信如何随着代理数量的增加而扩展。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20177.png"></p><p>对于系统中有1到4个代理的每种情况，在三次运行中平均计时，并记录通信模块繁忙的时间。每增加一个代理，通信时间只增加很少，因为系统<strong>只发送更改的KFs和MPs</strong>，而不是整个本地或服务器构图，避免了代理数量的线性复杂性。这些时间的大部分是在BA步骤之后花费的，此时地图的大部分KFs和MPs发生了更改，因此，几乎整个地图的更新都需要发送给相关代理。对代理上的跟踪频率的评估表明，输入流速率可以保持，从而确认了实时能力（实验1中手持摄像机为30Hz，实验2中无人机摄像机为20Hz）。</p><p>表II显示了全局BA的计时，按优化中考虑的KF数量的升序排列，以及参与优化的代理数量。BA所需的时间取决于参与KF的数量，因此，间接取决于参与地图的代理数量，<strong>因为代理越多，进入地图的KF越多，所有代理都使用相同的KF创建策略</strong>。正如预期的那样，对于少量KF，全球BA速度很快，但如果考虑到200多个KF，则需要10秒以上的时间。如第III-D节所述，我们的体系结构可以执行长时间的优化过程，因为在优化过程中，所有传入消息都存储在缓冲区中，但它会延迟从一个代理到另一个代理的信息通信，尽管不会影响机载SLAM估计的实时性能。这些延迟对协作方面的影响；来自优化地图的更新被传送到代理，<strong>延迟随着所考虑的关键帧数量的增加而增加</strong>。由于这在更大的地图中必然会出现问题，因此可以考虑一个<strong>更强大的地面站</strong>，而后续方向将通过辨别在代理当前状态下<strong>最具影响力的KF</strong>来探索优化的捷径。</p><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/notes/image/20178.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文提出了一种新的、功能强大的基于关键帧的SLAM协作体系结构。当机器人代理（例如小型UAV集群）独立运行机载实时视觉里程计时，计算能力更强的中央服务器会融合他们的经验，搜索环路闭合，并在必要时合并地图。通过将合并和优化的信息传回代理，代理能够对更新的信息进行操作，从而实现更好、更一致的估计。在两种情况下对所提议的系统进行彻底的评估，可以发现其在实际任务中的实用性以及处理时间延迟和一致性问题的能力。使用两个手持代理进行的室内实验演示了如何通过使用代理之间共享信息的协作系统来改善单个代理的轨迹，而室外实验显示该系统同时使用四个UAV，演示如何连续合并服务器上的构图，并进一步与多个代理关联，使用其他代理的信息扩充每个代理的构图。</p><p>与现有的工作相比，所提出的系统不仅在构图机器人的工作空间方面，而且在感知工作空间方面实现了协作。对系统复杂性的评估表明，通信工作量仅随着代理数量的增加而略有增加，而<strong>随着系统中代理和关键帧数量的增加，服务器上地图优化的时间显著增加</strong>，如预期的那样。虽然每个代理上的实时估计从未受到影响，并且系统已被证明在中等规模的户外区域（面积较大）上成功运行，但服务器上积累的经验的规模必然成为阻碍代理之间有效协作的瓶颈。虽然这可以通过更强大的服务器来解决，但未来的研究将侧重于调查优化步骤中参与关键帧的限制，以仅包括与当前代理姿势最相关的关键帧。</p>]]></content>
    
    
    <categories>
      
      <category>Paper Translation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>UE + AirSim + PX4 仿真配置</title>
    <link href="/2023/07/07/UE%20+%20AirSim%20+%20PX4/"/>
    <url>/2023/07/07/UE%20+%20AirSim%20+%20PX4/</url>
    
    <content type="html"><![CDATA[<h1 id="UE-AirSim-PX4-仿真"><a href="#UE-AirSim-PX4-仿真" class="headerlink" title="UE + AirSim + PX4 仿真"></a>UE + AirSim + PX4 仿真</h1><p>UE和AirSim都使用的UE 4.25的版本，可以直接复制过来编译，Airsim可能需要Clean一下再编译。</p><h2 id="UE4安装"><a href="#UE4安装" class="headerlink" title="UE4安装"></a>UE4安装</h2><p>UE4是虚拟引擎，运行airsim的平台。</p><p>理论上先注册，github加入团队，下载UE4，安装编译。</p><p>参考<a href="https://blog.csdn.net/sanyuecaozhang/article/details/123210485">Ubuntu系统安装Airsim仿真器</a>，<a href="https://blog.csdn.net/syy014799/article/details/121871567">Ubuntu18.04 安装AirSim仿真插件以及载入地图（Airsim-v1.3.1+UE4.25）</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> UnrealEngine<br>./Setup.sh<br>./GenerateProjectFiles.sh<br>make<br></code></pre></td></tr></table></figure><p>编译下来100G，一定找到足够空间。实验室用的UE4版本为4.25.4，新版测试了发现总有问题，所以建议大家继续沿用已经编译好的。</p><h2 id="AirSim构建"><a href="#AirSim构建" class="headerlink" title="AirSim构建"></a>AirSim构建</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/Microsoft/AirSim.git<br><span class="hljs-built_in">cd</span> AirSim<br><br>./setup.sh<br>./build.sh<br><span class="hljs-comment"># use ./build.sh --debug to build in debug mode</span><br></code></pre></td></tr></table></figure><p>理论上使用新版本，但根据实验室UE的版本，airsim大概是1.4或1.5类的。</p><h2 id="使用AirSim"><a href="#使用AirSim" class="headerlink" title="使用AirSim"></a>使用AirSim</h2><p>在UE目录下，打开UE，第一次会比较慢。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./Engine/Binaries/Linux/UE4Editor<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/slashzyz/learning_slam/raw/master/image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hbmdvSEhISA==,size_16,color_FFFFFF,t_70%23pic_center.png" alt="在这里插入图片描述"></p><p>打开后，在“<strong>更多</strong>“中找到<code>AirSim/Unreal/Environments/Blocks</code>，“Environments“目录下的每一个包都表示一个虚拟环境。</p><p>点击<code>Blocks.uproject</code>，选中会提示上图，这里我们需要点击“<strong>更多选项</strong>”，再点“<strong>跳过转换</strong>”。此时会关闭UE，终端会断开，并重新打开UE加载环境。</p><p>如果提示了“<strong>是否构建项目</strong>”，选择“<strong>是</strong>“表示选择使用汽车，选择“<strong>否</strong>“表示选择四旋翼无人机。</p><h3 id="运行ros和python脚本"><a href="#运行ros和python脚本" class="headerlink" title="运行ros和python脚本"></a>运行ros和python脚本</h3><p>打开后，ros包需要构建，进入<code>./AirSim/ros/</code>目录下编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">catkin_make<br></code></pre></td></tr></table></figure><p>添加ros环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source <span class="hljs-variable">$&#123;your path&#125;</span>/AirSim/ros/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><p>此时可以运行ROS节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch airsim_ros_pkgs airsim_node.launch<br></code></pre></td></tr></table></figure><p>如果没有报错的话可以查看<code>rostopic list</code>此时的话题，有相关imu、GPS等信息。</p><p>此外，可以运行基本的python程序控制飞机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ./AirSim/PythonClient/multirotor<br>python hello_drone.py<br><span class="hljs-comment"># 不行就python3 hello_drone.py</span><br></code></pre></td></tr></table></figure><p>如果运行成功会提示按键执行起飞等任务。此外可以自己编写运行控制代码。</p><h3 id="更改-json配置文件"><a href="#更改-json配置文件" class="headerlink" title="更改.json配置文件"></a>更改.json配置文件</h3><p>在用户的根目录下，有一个<code>./Documents/AirSim/</code>下有一个<code>settings.json</code>文件，其中可以更改配置。</p><p>如需要添加相机等模块，可以添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">  <span class="hljs-attr">&quot;Vehicles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;VehicleType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SimpleFlight&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;DefaultVehicleState&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Armed&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;EnableCollisionPassthrogh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;EnableCollisions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;AllowAPIAlways&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Cameras&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;front_center_custom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;CaptureSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;PublishToRos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ImageType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;Width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">640</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;Height&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">480</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;FOV_Degrees&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">27</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;DepthOfFieldFstop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.8</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;DepthOfFieldFocalDistance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200.0</span><span class="hljs-punctuation">,</span> <br>              <span class="hljs-attr">&quot;DepthOfFieldFocalRegion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200.0</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;TargetGamma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.5</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;X&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.50</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Y&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Z&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.10</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;Pitch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Roll&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Yaw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>每次更新了<code>.json</code>文件后都需要重新运行<code>UE4Editor</code>，重新加载。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1-版本不对或插件无法构建"><a href="#1-版本不对或插件无法构建" class="headerlink" title="1. 版本不对或插件无法构建"></a>1. 版本不对或插件无法构建</h4><p>会出现类似无法build插件，如AirSim和Blocks无法构建。或者出现了版本update之类的。查看了有人提出的issue，解决方法为：<a href="https://github.com/microsoft/AirSim/issues/4535">无法使用 UE4.27 打开 Blocks.uproject</a></p><ol><li>清理 UBlocks 项目 <code>cd ./AirSim/Unreal/Environments/Blocks &amp;&amp; ./clean.sh</code></li><li>安装 <a href="https://www.mono-project.com/download/stable/#download-lin">mono-complete for Ubuntu 18.04</a>，可让您在 Linux 上运行 .exe 文件 </li><li>做了一些链接： <code>sudo ln -s /usr/bin/mono /bin/mono &amp;&amp; sudo ln -s /usr/lib/mono /lib/mono</code></li><li><strong>运行以下命令来重建 Blocks 项目</strong>： <code>./UnrealEngine/Engine/Binaries/ThirdParty/Mono/Linux/bin/mono ./UnrealEngine/Engine/Binaries/DotNET/UnrealBuildTool.exe Development  Linux  -Project=/home/slash/AirSim/Unreal/Environments/Blocks/Blocks.uproject  -TargetType=Editor -Progress</code></li><li>从命令行启动 UE4Editor： <code>~/UnrealEngine/Engine/Binaries/Linux/UE4Editor</code></li><li>点击更多 &gt; 浏览 &gt; <code>/home/andrew/AirSim/Unreal/Environments/Blocks/Blocks.uproject</code></li><li>出现错误“<strong>这个项目是用不同版本的虚幻引擎制作的</strong>”。  点击“<strong>更多选项</strong>”&gt;“<strong>跳过转换</strong>” </li><li>此时便可以开启项目，不幸的是，您总是必须单击“跳过转换”才能打开它。  如果有人知道更好的方法，请随时分享。  谢谢！</li></ol><ul><li>其中最重要的是第四步，对于其他环境如“LandscapeMountains“同样可以用该方法。</li></ul><h4 id="2-python文件运行错误"><a href="#2-python文件运行错误" class="headerlink" title="2. python文件运行错误"></a>2. python文件运行错误</h4><p><a href="https://github.com/microsoft/AirSim-NeurIPS2019-Drone-Racing/issues/40">https://github.com/microsoft/AirSim-NeurIPS2019-Drone-Racing/issues/40</a></p><p><a href="https://github.com/microsoft/AirSim/issues/1225">https://github.com/microsoft/AirSim/issues/1225</a></p><p>主要体现在报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">msgpackrpc.error.RPCError: rpclib: <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;enableApiControl&#x27;</span> (called with 2 arg(s)) threw an exception. The exception contained this information: Vehicle API <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;&#x27;</span> is not available. This could either because this is simulation-only API or this vehicle does not exist.<br></code></pre></td></tr></table></figure><p>这个主要是<code>.json</code>文件写的有问题导致的，应该再查看是否有些地方不符合规范。</p><h2 id="PX4与mavros使用"><a href="#PX4与mavros使用" class="headerlink" title="PX4与mavros使用"></a>PX4与mavros使用</h2><p>ref1:<a href="https://gitee.com/pi-lab/research_uav_cv_simulation/tree/master/doc/airsim">AirSim仿真环境搭建</a></p><p>ref2:<a href="https://gitee.com/pi-lab/research_uav_cv_simulation/blob/master/unreal_uav_env_sim/UE_sim_linux.md">linux具体配置</a></p><p>首先在我们配置好了PX4的基础上，进行以下三步，</p><ol><li><p>在配置好的PX4文件夹里面打开终端输入命令 <code>make px4_sitl_default none_iris</code></p></li><li><p>打开新的终端输入命令<code> roslaunch mavros px4.launch fcu_url:=&quot;udp://:14550@127.0.0.1:4560&quot;</code></p></li><li><p>打开在Airsim&#x2F;ros文件夹打开新的终端输入命令   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> devel/setup.bash<br>roslaunch airsim_ros_pkgs airsim_node.launch<br></code></pre></td></tr></table></figure></li></ol><p>第二步里面的端口可能不一样，如果命令不能使用，根据UE4打印的端口信息进行修改</p><p>最后第一步的终端中输入命令commander takeoff 如果无人机起飞则Airism与PX4与ROS连接成功可以通过rostopic查看Airsim有哪些话题输出。</p>]]></content>
    
    
    <categories>
      
      <category>PX4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS无人机自主飞行与PX4硬件配置常见问题</title>
    <link href="/2023/06/30/ROSwithPX4/"/>
    <url>/2023/06/30/ROSwithPX4/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS无人机自主飞行与PX4配置问题"><a href="#ROS无人机自主飞行与PX4配置问题" class="headerlink" title="ROS无人机自主飞行与PX4配置问题"></a>ROS无人机自主飞行与PX4配置问题</h1><p>文中引用均为参考，部分内容转载！特感谢提供了参考！</p><h2 id="PX4的配置"><a href="#PX4的配置" class="headerlink" title="PX4的配置"></a>PX4的配置</h2><ul><li>首先需要对PX4烧写固件，版本问题上其实没有很多区别，目前我所用的最新版本——1.12.3版本的<a href="https://github.com/PX4/PX4-Autopilot/releases">px4_fmu_v3_default</a>，下载这个后在固件处烧写</li><li>完成基本飞控配置<a href="https://wiki.amovlab.com/public/prometheuswiki/">参考阿木实验室第五条基本配置</a><ul><li>固件刷写</li><li>机架选择</li><li>传感器校准</li><li>遥控器校准</li><li>飞形模式调整</li><li>电池校准</li><li>电调校准（参考后面，这里的px4校准会有问题）</li></ul></li></ul><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p>首先可以参考：<a href="https://blog.csdn.net/qq_38768959/article/details/109605241">常见参数配置</a>、<a href="http://pix.1yuav.com/">pixhawk 2.4.8所有问题</a></p><h3 id="！电调校准"><a href="#！电调校准" class="headerlink" title="！电调校准"></a>！电调校准</h3><p>把这个问题直接放到了最前方，因为这个问题困惑了快一周，因为想要测试无人机在offboard模式下用ros控制自主飞行，但是数次尝试后发现竟然莫名其妙的把电调动了，根本原因应该是错误操作使油门上下阈值变化了！</p><h4 id="问题现象："><a href="#问题现象：" class="headerlink" title="问题现象："></a>问题现象：</h4><p>主要是解锁后，<strong>会出现一个甚至多个电机不转，但是给大油门后会转</strong>，然后用QGC的motor测试，发现给相同的油门响应，“坏的电机”会不反应，只有给很大才会转。</p><h4 id="尝试与发现："><a href="#尝试与发现：" class="headerlink" title="尝试与发现："></a>尝试与发现：</h4><p>其实就是需要电调校准，校准方法非常讲究。。。</p><p>因为我们实验室用的是阿木实验室Z410飞机，原先似乎是APM固件，而我们一般都会用PX4固件。这里就牵扯到他电机校准上的不同了。我发现用QGC里面这个方法不太管用，没有效果。</p><p><img src="https://wiki.amovlab.com/public/prometheuswiki/images/7-esc-calibration.png" alt="https://img-blog.csdnimg.cn/20210520183053970.png"></p><p>于是我查了很多方法，比如用MissionPlanner中刷APM固件再电调校准，理论上是可以，就连售后也这么说的。。。</p><p>但是奈何不太会用MP，于是找了很多不需要地面站的校准方法，主要就是插拔上电，给遥控器油门的上下阈值。</p><h4 id="具体校准方法："><a href="#具体校准方法：" class="headerlink" title="具体校准方法："></a>具体校准方法：</h4><ul><li><p>第一步：要先烧写APM固件（没错就是这么迷惑，先烧成APM校准完电调再烧回PX4就好）</p><ul><li>在QGC里选择自定义固件版本，烧写APM固件<a href="tools/firmware/apm/ArduCopter-v3.px4">ArduCopter-v3.px4</a>，这个是我找到的比较合适的版本。</li></ul></li><li><p>第二步：可以直接在QGC里操作，<strong>只用选择机型和校准遥控器</strong>，可以先不校准传感器，遥控器校准了才能校准电调。</p></li><li><p>第三步：校准电调。<a href="https://blog.csdn.net/hdlwyt/article/details/120583506">我主要参考了这个</a></p><ul><li>断掉所有与飞控的连接，包括桨叶、usb线</li><li>遥控器打开把油门给到最大，然后给飞控上电（电池上电），当PIXHAWK红绿蓝灯周期闪烁（大led灯）后，给飞控断电</li><li>油门继续保持最大状态，重新给飞控上电，当听到滴滴的声音结束后，长按安全开关直至变成红色常亮（原来是闪烁），此时进入电调校准状态</li><li>电调校准状态下听到“滴”的一声（或两声，甚至出现一阵音乐声都有可能），此时就捕获了最大油门。然后迅速把遥控器油门下压到最小，再听到类似“滴”的一声后，捕获了最小油门。</li><li>此时校准完成，改变油门可以控制电机转速。终于可以看到四个电机又能同时转了！</li></ul></li><li><p>第四步：解锁尝试，油门推至右下角，解锁成功就会四旋翼怠速旋转。bingo!</p></li><li><p>补充：别忘了现在是APM固件，记得在QGC里重新烧写PX4固件。完成除了电调校准的其他步骤即可。（也就是别点上面那张图里的）</p></li></ul><h3 id="1-compass-xx-inconsistent"><a href="#1-compass-xx-inconsistent" class="headerlink" title="1. compass xx inconsistent"></a>1. compass xx inconsistent</h3><p>提示罗盘某个角度未被包含，而且经常不同。解决方法：<code>COM_ARM_MAG_ANG</code>设为-1</p><blockquote><p>可能会提示不让设置，然后弹出点击强制保存。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210520183053970.png"></p><h3 id="2-high-Accelerometer-bios"><a href="#2-high-Accelerometer-bios" class="headerlink" title="2. high Accelerometer bios"></a>2. high Accelerometer bios</h3><p>提示加速度计偏移过大。解决方法：把<code>com_arm_ekf_ab</code>这个参数调大一些</p><p><img src="https://img-blog.csdnimg.cn/20201120133050501.png#pic_center"></p><h3 id="3-Accels-inconsistent-check-cal"><a href="#3-Accels-inconsistent-check-cal" class="headerlink" title="3. Accels inconsistent - check cal"></a>3. Accels inconsistent - check cal</h3><p>把这个参数<code>COM_ARM_IMU_ACC</code>改大一些，以加速度计为例，如果陀螺仪出现类似报错也是修改相应的参数。</p><h3 id="4-USB连接检查"><a href="#4-USB连接检查" class="headerlink" title="4. USB连接检查"></a>4. <strong>USB连接检查</strong></h3><p>这个参数是检查起飞时是否有USB连接，默认情况下有USB连接时是无法解锁的，如果需要插USB解锁，需要设置为197848<br> <img src="https://img-blog.csdnimg.cn/20201110192119958.png#pic_center" alt="在这里插入图片描述"></p><h3 id="5-安全开关检查"><a href="#5-安全开关检查" class="headerlink" title="5. 安全开关检查"></a>5. <strong>安全开关检查</strong></h3><p>默认情况下安全开关是慢闪状态，设置该参数为22027时，上电后安全开关自动切换为双闪。<br> <img src="https://img-blog.csdnimg.cn/20201110192151783.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>注意，如果改了后可能会出现：只有插上usb线同时上电才能解锁飞机的情况，而没有插usb单独用遥控器解锁的话，可能无法解锁。当时我遇到这个问题困惑了半天，最后发现是这个问题，所以最后又改回了0。</p></blockquote><h2 id="ROS控制PX4"><a href="#ROS控制PX4" class="headerlink" title="ROS控制PX4"></a>ROS控制PX4</h2><p>因为我最终目标是NX板载控制，所以其实只用有线连接就可以，但是真机飞行很危险而且代价较高，所以建议用无线数传先做测试。</p><h3 id="1-有线控制"><a href="#1-有线控制" class="headerlink" title="1. 有线控制"></a>1. 有线控制</h3><p>usb线连接无人机pixhawk，先查看下端口连接的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /dev/tty*        <span class="hljs-comment"># 下面两句只运行一句即可（根据有 ttyUSB0 还是 ttyACM0）</span><br></code></pre></td></tr></table></figure><p>终端运行：（我的是ACM0）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch mavros px4.launch fcu_url:=/dev/ttyUSB0:57600  <span class="hljs-comment">#有ttyUSB0</span><br>roslaunch mavros px4.launch fcu_url:=/dev/ttyACM0:57600  <span class="hljs-comment">#有ttyACM0</span><br></code></pre></td></tr></table></figure><p>此时就是用串口连接了无人机，我们可以运行我们的代码：</p><p><a href="https://dev.px4.io/master/en/ros/mavros_offboard.html">依旧是官方的offb_node文件实例</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file offb_node.cpp</span><br><span class="hljs-comment"> * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight</span><br><span class="hljs-comment"> * Stack and tested in Gazebo SITL</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ros/ros.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;geometry_msgs/PoseStamped.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mavros_msgs/CommandBool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mavros_msgs/SetMode.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mavros_msgs/State.h&gt;</span></span><br><br>mavros_msgs::State current_state;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">state_cb</span><span class="hljs-params">(<span class="hljs-type">const</span> mavros_msgs::State::ConstPtr&amp; msg)</span></span>&#123;<br>    current_state = *msg;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;offb_node&quot;</span>);<br>    ros::NodeHandle nh;<br><br>    ros::Subscriber state_sub = nh.<span class="hljs-built_in">subscribe</span>&lt;mavros_msgs::State&gt;<br>            (<span class="hljs-string">&quot;mavros/state&quot;</span>, <span class="hljs-number">10</span>, state_cb);<br>    ros::Publisher local_pos_pub = nh.<span class="hljs-built_in">advertise</span>&lt;geometry_msgs::PoseStamped&gt;<br>            (<span class="hljs-string">&quot;mavros/setpoint_position/local&quot;</span>, <span class="hljs-number">10</span>);<br>    ros::ServiceClient arming_client = nh.<span class="hljs-built_in">serviceClient</span>&lt;mavros_msgs::CommandBool&gt;<br>            (<span class="hljs-string">&quot;mavros/cmd/arming&quot;</span>);<br>    ros::ServiceClient set_mode_client = nh.<span class="hljs-built_in">serviceClient</span>&lt;mavros_msgs::SetMode&gt;<br>            (<span class="hljs-string">&quot;mavros/set_mode&quot;</span>);<br><br>    <span class="hljs-comment">//the setpoint publishing rate MUST be faster than 2Hz</span><br>    <span class="hljs-function">ros::Rate <span class="hljs-title">rate</span><span class="hljs-params">(<span class="hljs-number">20.0</span>)</span></span>;<br><br>    <span class="hljs-comment">// wait for FCU connection</span><br>    <span class="hljs-keyword">while</span>(ros::<span class="hljs-built_in">ok</span>() &amp;&amp; !current_state.connected)&#123;<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>        rate.<span class="hljs-built_in">sleep</span>();<br>    &#125;<br><br>    geometry_msgs::PoseStamped pose;<br>    pose.pose.position.x = <span class="hljs-number">0</span>;<br>    pose.pose.position.y = <span class="hljs-number">0</span>;<br>    pose.pose.position.z = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">//send a few setpoints before starting</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">100</span>; ros::<span class="hljs-built_in">ok</span>() &amp;&amp; i &gt; <span class="hljs-number">0</span>; --i)&#123;<br>        local_pos_pub.<span class="hljs-built_in">publish</span>(pose);<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>        rate.<span class="hljs-built_in">sleep</span>();<br>    &#125;<br><br>    mavros_msgs::SetMode offb_set_mode;<br>    offb_set_mode.request.custom_mode = <span class="hljs-string">&quot;OFFBOARD&quot;</span>;<br><br>    mavros_msgs::CommandBool arm_cmd;<br>    arm_cmd.request.value = <span class="hljs-literal">true</span>;<br><br>    ros::Time last_request = ros::Time::<span class="hljs-built_in">now</span>();<br><br>    <span class="hljs-keyword">while</span>(ros::<span class="hljs-built_in">ok</span>())&#123;<br>        <span class="hljs-keyword">if</span>( current_state.mode != <span class="hljs-string">&quot;OFFBOARD&quot;</span> &amp;&amp;<br>            (ros::Time::<span class="hljs-built_in">now</span>() - last_request &gt; ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">5.0</span>)))&#123;<br>            <span class="hljs-keyword">if</span>( set_mode_client.<span class="hljs-built_in">call</span>(offb_set_mode) &amp;&amp;<br>                offb_set_mode.response.mode_sent)&#123;<br>                <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;Offboard enabled&quot;</span>);<br>            &#125;<br>            last_request = ros::Time::<span class="hljs-built_in">now</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>( !current_state.armed &amp;&amp;<br>                (ros::Time::<span class="hljs-built_in">now</span>() - last_request &gt; ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">5.0</span>)))&#123;<br>                <span class="hljs-keyword">if</span>( arming_client.<span class="hljs-built_in">call</span>(arm_cmd) &amp;&amp;<br>                    arm_cmd.response.success)&#123;<br>                    <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;Vehicle armed&quot;</span>);<br>                &#125;<br>                last_request = ros::Time::<span class="hljs-built_in">now</span>();<br>            &#125;<br>        &#125;<br><br>        local_pos_pub.<span class="hljs-built_in">publish</span>(pose);<br><br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>        rate.<span class="hljs-built_in">sleep</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>终端运行:(ros包流程)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_ws/src<br>catkin_create_pkg offb geometry_msgs mavros roscpp<br><span class="hljs-comment">#程序包名称 pi_offboard_px4，依赖的包 geometry_msgs, mavros 和 roscpp</span><br><br><span class="hljs-built_in">cd</span> offb/src<br><span class="hljs-built_in">touch</span> offb_node.cpp<br>vim offb_node.cpp    <span class="hljs-comment">#添加上面的代码</span><br></code></pre></td></tr></table></figure><p>注意别忘了在CMakeLists文件里配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/catkin_ws/src/offb/<br>vim CMakeLists.txt<br></code></pre></td></tr></table></figure><p>更改添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(offb src/offb_node.cpp)<br><span class="hljs-keyword">target_link_libraries</span>(offb<br><span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>)<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">catkin_make <span class="hljs-comment">#编译</span><br>catkin_make install<br><span class="hljs-built_in">source</span> devel/setup.bash     <span class="hljs-comment">#配置catkin 工作空间</span><br></code></pre></td></tr></table></figure><p><strong>在上面运行了roslaunch之后就可以运行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rosrun offb offb_node<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>offboard模式一定要gps信息，所以只能在室外测试。我们在roslaunch端中看不到提示<code>NO GPS FIX</code> 信息就代表搜到了星，或者查看mavros话题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rostopic list<br>rostopic <span class="hljs-built_in">echo</span> /mavros/altitude<span class="hljs-comment"># 高度信息</span><br>rostopic <span class="hljs-built_in">echo</span> /mavros/local_position/local       <span class="hljs-comment"># 这个是绝对的gps信息</span><br></code></pre></td></tr></table></figure><p>上电后，没有上桨的话可能电机会一直转，甚至加速，我们上下移动飞机，会发现电机转速变化。所以测试一下就断电吧。</p><p><strong>我们查看local里的信息发现信息位置并不是0，0，0。而且会跳变，这就牵扯到了我们在代码里写的0，0，2。但是起点不是0，0，0，这是非常危险的！！！因为根本不知道会朝哪里飞。所以后续会不使用绝对位置飞行，而采用线速度飞行，以时间控制距离结束自主降落。</strong></p><h3 id="2-无线数传"><a href="#2-无线数传" class="headerlink" title="2. 无线数传"></a>2. 无线数传</h3><p>现在很多数传都直接使用wifi，我们只需要在pc端连接飞机数传wifi信息：</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">wifi名： cuavwlink_xxxxx<br>wifi密码：xxxxxx<br>UDP: 14550<br></code></pre></td></tr></table></figure><p>连接了WiFi后，先查看WiFi设置里看到IPV4端口，其实就是找到位置如<code>192.168.4.2</code>之类的（结尾应该是2因为飞机是1）</p><p>运行：(注意格式)：前面的是udp后面是端口，最后的<code>24580</code>好像随便输一个就行，感觉类似自定义命名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch mavros px4.launch fcu_url:=udp://:14550@192.168.4.2:24580<br></code></pre></td></tr></table></figure><p>看到类似这样的黄色提示是正常的（除了GPS，因为我现在在室内敲得这段）。</p><p>然后就可以继续<code>rosrun</code>了。<strong>注意安全！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>PX4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>从零配置CCM-SLAM，支持五架无人机+RealSense相机</title>
    <link href="/2023/06/29/ccm-5uav/"/>
    <url>/2023/06/29/ccm-5uav/</url>
    
    <content type="html"><![CDATA[<h1 id="ccmslam-5uav"><a href="#ccmslam-5uav" class="headerlink" title="ccmslam_5uav"></a>ccmslam_5uav</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本仓库在CCM-SLAM基础上，进行了改进。在原有最多使用四架无人机的基础上，改进为五架无人机地图融合。</p><p>改进部分主要在ServerSystem, Viewer, MapMatcher等类内进行了新节点实例化。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>Ubuntu 20或18</li><li>OpenCV 3.2</li></ul><h2 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h2><h3 id="1-OpenCV安装"><a href="#1-OpenCV安装" class="headerlink" title="1. OpenCV安装"></a>1. OpenCV安装</h3><p>安装依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>-y <span class="hljs-keyword">build-essential </span>checkinstall cmake pkg-<span class="hljs-built_in">config</span> yasm git gfortran<br>sudo apt <span class="hljs-keyword">install </span>-y libgstreamer1.<span class="hljs-number">0</span>-dev libgstreamer-plugins-<span class="hljs-keyword">base1.0-dev</span><br><span class="hljs-keyword"></span>sudo apt <span class="hljs-keyword">install </span>-y libgstreamer1.<span class="hljs-number">0</span>-dev libgstreamer-plugins-<span class="hljs-keyword">base1.0-dev </span>libgtk2.<span class="hljs-number">0</span>-dev libtbb-dev libatlas-<span class="hljs-keyword">base-dev </span><br></code></pre></td></tr></table></figure><p>下载<a href="https://gitee.com/link?target=https://github.com/opencv/opencv/archive/refs/tags/3.2.0.zip">OpenCV3.2</a></p><p>解压后，完成部分文件修改参考<a href="https://gitee.com/link?target=https://blog.csdn.net/u014613745/article/details/78310916">https://blog.csdn.net/u014613745/article/details/78310916</a></p><p>1）.找到FindCUDA.cmake文件</p><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppial)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppicc)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppicom)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppidei)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppif)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppig)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppim)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppist)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppisu)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppitc)</span></span><br></code></pre></td></tr></table></figure><p>2）.找到行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppi_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppial_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicom_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppidei_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppif_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppig_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppim_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppist_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppisu_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppitc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>3）.找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppial_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppicc_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppicom_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppidei_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppif_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppig_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppim_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppist_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppisu_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppitc_LIBRARY CACHE)</span></span><br></code></pre></td></tr></table></figure><p>4）.cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_fp16.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>完成后即可开始编译</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd opencv 3.20<br>mkdir build<br>cd build<br>cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Release  <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=/usr/local \<br><span class="hljs-attribute">-DOPENCV_GENERATE_PKGCONFIG</span>=1  <span class="hljs-built_in">..</span><br>make -j4<br>sudo make install<br></code></pre></td></tr></table></figure><p>此时可以通过</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">pkg-<span class="hljs-built_in">config</span> <span class="hljs-comment">--modversion opencv</span><br></code></pre></td></tr></table></figure><p>查看到opencv此时的版本已经为3.2，且被装在&#x2F;usr&#x2F;local里</p><h3 id="2-ROS安装与配置"><a href="#2-ROS安装与配置" class="headerlink" title="2. ROS安装与配置"></a>2. ROS安装与配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install curl <br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ros-noetic-desktop  <span class="hljs-comment"># 若为ubuntu18则为melodic</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/noetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/link?target=https://mp.weixin.qq.com/s?__biz=MzkzMzI2MTU2Nw==&mid=2247484207&idx=1&sn=e2762a8a9bf9c1a44fea4d365bfc9c2f&chksm=c24e7abff539f3a9d557d46188a6af3e2f385850c0df1721a9f8cb2ac90873e1f7353b9a1282&mpshare=1&scene=1&srcid=1022y7kDVt7kCLa4n1ZXWAZC&sharer_sharetime=1634858167048&sharer_shareid=3e3650f7959dd3017b423b28ebe07cb1&exportkey=A87wEj0Ymq+Hy48ilhHpvCE=&pass_ticket=b+YFCkXlTwiOLyaMziPP63zfarN4dUtbLfxGTLLossTKGDY4HFUk2SKWs4QHZdO0&wx_header=0%23rd">rosdepc链接</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-pip <br>sudo pip3 install rosdepc<br>sudo rosdepc init<br>rosdepc <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">roscore</span><br><span class="hljs-attribute">rosrun turtlesim turtlesim_node</span><br></code></pre></td></tr></table></figure><blockquote><p>若是出现问题IOError:[Errno 13]permission denied: &#x2F;home&#x2F;neousys&#x2F;.ros&#x2F;roscore-11311.pid”</p><p>fix: 给文件名加权限即可</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo chmod <span class="hljs-number">777</span> -R ~<span class="hljs-regexp">/.ros/</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="3-Realsense-ros"><a href="#3-Realsense-ros" class="headerlink" title="3. Realsense-ros"></a>3. Realsense-ros</h3><p><strong>此处已默认nx安装librealsense 2.51</strong></p><p>安装ros包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/catkin_ws/</span>src<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/IntelRealSense/</span>realsense-ros.git  <span class="hljs-comment"># 把2.3.2版本复制进来</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/pal-robotics/</span>ddynamic_reconfigure.git<br>cd ~/catkin_ws &amp;&amp; catkin_make<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">roslaunch realsense2_camera rs_camera.<span class="hljs-built_in">launch</span> <br>rqt_image_raw<br></code></pre></td></tr></table></figure><h3 id="4-cluster-slam配置"><a href="#4-cluster-slam配置" class="headerlink" title="4. cluster-slam配置"></a>4. cluster-slam配置</h3><p>按照下面配置编译代码</p><ul><li><pre><code class="bash">sudo apt-get install python-catkin-tools<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>- ```bash<br>  mkdir -p ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<br>  cd ~/cluster-slam_ws<br>  <span class="hljs-keyword">source</span> <span class="hljs-regexp">/opt/</span>ros<span class="hljs-regexp">/noetic/</span>setup.bash<br>  catkin init<br>  catkin config --extend <span class="hljs-regexp">/opt/</span>ros/noetic<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 代码复制cd cd ~/cluster-slam_ws/srcgit clone https://gitee.com/slashzyz/cluster-slam.git<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```bash<br>  <span class="hljs-comment"># 编译DBoW2库</span><br>  cd ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<span class="hljs-regexp">/cluster-slam/</span>cslam<span class="hljs-regexp">/thirdparty/</span>DBoW2/<br>  mkdir build<br>  cd build<br>  cmake ..<br>  make -j8<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 编译g2o库cd ~/cluster-slam_ws/src/cluster-slam/cslam/thirdparty/g2omkdir buildcd buildcmake --cmake-args -DG2O_U14=0 ..make -j8<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```bash<br>  <span class="hljs-comment"># 解压词典</span><br>  cd ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<span class="hljs-regexp">/cluster-slam/</span>cslam/conf<br>  unzip ORBvoc.txt.zip<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 编译程序代码cd ~/cluster-slam_ws/catkin build ccmslam --cmake-args -DG2O_U14=0 -DCMAKE_BUILD_TYPE=Releasesource ~/cluster-slam_ws/devel/setup.bash<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><br><br><span class="hljs-comment">### 5. 相机配置文件与运行</span><br><br><span class="hljs-comment">#### D435i 相机launch文件配置</span><br><br>打开realsense-ros包下的rs_camera.launch，将其中分辨率<br><br>```xml<br>  &lt;arg <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;color_width&quot;</span>         <span class="hljs-attribute">default</span>=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br>  &lt;arg <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;color_height&quot;</span>        <span class="hljs-attribute">default</span>=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color_width&quot;</span>         <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;424&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color_height&quot;</span>        <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;240&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>将图像频率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;arg name=<span class="hljs-string">&quot;color_fps&quot;</span>           default=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;arg name=<span class="hljs-string">&quot;color_fps&quot;</span>           default=<span class="hljs-string">&quot;15&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>为了多机slam融合</p><p>需要对无人机x的相机进行编号，即将其中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;camera&quot;</span>              <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;camera&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;camera&quot;</span>              <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;camerax&quot;</span>/&gt;</span>    <br></code></pre></td></tr></table></figure><p>此处的x表示第几架无人机</p><p>最终为：</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419190853764.png" alt="image-20230419190853764"></p><p><strong>conf文件配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/cluster-slam_ws/src/cslam/conf<br>gedit vi_d455.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419190955278.png" alt="image-20230419190955278"></p><p>对其中的内参、畸变参数进行修改</p><p>只修改该部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">Camera.fx: 208.875259<br>Camera.fy: 208.628463<br>Camera.cx: 214.399047<br>Camera.cy: 123.552673<br><br>Camera.k1: -0.056723371148109436<br>Camera.k2: 0.07017022371292114<br>Camera.p1: -0.000241746864048764<br>Camera.p2: 0.000677465635817498<br>Camera.k3: -0.0224686115980148<br></code></pre></td></tr></table></figure><p>查询相机参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br>rostopic <span class="hljs-built_in">echo</span> /camera/color/camera_info<br></code></pre></td></tr></table></figure><p>将其中的K的四个、D的五个的参数，覆盖上述参数</p><h4 id="多无人机网络配置"><a href="#多无人机网络配置" class="headerlink" title="多无人机网络配置"></a>多无人机网络配置</h4><p>所有无人机端均需要完整配置一遍以上步骤，最终在pc端运行Server.launch，各个无人机nx上运行Clientx_d435.launch</p><p><strong>！！！保证所有设备在同一网路下，无人机NX上打开终端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>插入(第一行为pc端的ip，通过ifconfig指令查询；第二行为nx端ip，每架无人机不同，查询自己的并输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> ROS_MASTER_URI=http://192.168.xxx.xxx:11311<br><span class="hljs-built_in">export</span> ROS_IP=192.168.xxx.xxx<br></code></pre></td></tr></table></figure><p><strong>！！！注意每台NX均需要完成该步骤</strong></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><strong>相机运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br></code></pre></td></tr></table></figure><p><strong>服务器端运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch ccmslam Server.launch<br>roscd ccmslam<br>rviz -d conf/rviz/ccmslam.rviz<br></code></pre></td></tr></table></figure><p>将rviz中右侧标签栏中MarkerC0、MapPointsC0、MarkerC1、MapPointsC1、MarkerC2、MapPointsC2、MarkerC3、MapPointsC3旁均点亮对钩</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419191326739.png" alt="image-20230419191326739"></p><p><strong>无人机端运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch ccmslam Client0_d435.launch<br></code></pre></td></tr></table></figure><p>此时，对无人机进行<strong>初始化</strong>，即举着无人机进行<strong>轻微的</strong>旋转和平移，知道该终端出现</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419191529738.png" alt="image-20230419191529738"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Clientsystem initialized (Client ID: 0)<br>[ INFO] [1681803951.793837487]: Started CSLAM client node...<br>New Map created with 100 points<br></code></pre></td></tr></table></figure><p>表示此时已经初始化完成，并生成了地图点</p><h4 id="多机运行"><a href="#多机运行" class="headerlink" title="多机运行"></a>多机运行</h4><p>多无人机即需要在各自运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br>roslaunch ccmslam Clientx_d435.launch<br></code></pre></td></tr></table></figure><p>当前已经支持五架无人机运行，即x可以从0-4运行四个</p>]]></content>
    
    
    <categories>
      
      <category>SLAM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Jetson NX从零配置VINS+RealSense</title>
    <link href="/2023/06/29/nx-vins/"/>
    <url>/2023/06/29/nx-vins/</url>
    
    <content type="html"><![CDATA[<h1 id="NX配置终极版"><a href="#NX配置终极版" class="headerlink" title="NX配置终极版"></a>NX配置终极版</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>板载计算机使用Jetson Xiaxver NX，本文档作为配置使用</p><h2 id="1-烧录镜像"><a href="#1-烧录镜像" class="headerlink" title="1. 烧录镜像"></a>1. 烧录镜像</h2><ul><li>直接选择我做好的得了</li><li><strong>烧录Ubuntu 18.04.5，nvida官网</strong></li></ul><h2 id="2-换源"><a href="#2-换源" class="headerlink" title="2. 换源"></a>2. 换源</h2><p>更换成中科大的!清华的有问题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#中科大源</span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-updates main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-security main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-backports main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic main universe restricted <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main universe restricted</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update<br></code></pre></td></tr></table></figure><h2 id="3-卸载OpenCV并更换为3-20"><a href="#3-卸载OpenCV并更换为3-20" class="headerlink" title="3. 卸载OpenCV并更换为3.20"></a>3. 卸载OpenCV并更换为3.20</h2><p>项目要求vins定位，但对于3.2版本能用。但jetsonNX此时系统默认安装了OpenCV 4.1，即使参照各种方法编译通过，但运行会有段错误。查了issue，给的解决方法还是建议用3.2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt purge libopencv*<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install -y build-essential checkinstall cmake pkg-config yasm git gfortran<br>sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev<br>sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libtbb-dev libatlas-base-dev <br></code></pre></td></tr></table></figure><p>下载<a href="https://github.com/opencv/opencv/archive/refs/tags/3.2.0.zip">OpenCV3.2</a></p><p>解压后，完成部分文件修改参考<a href="https://blog.csdn.net/u014613745/article/details/78310916">https://blog.csdn.net/u014613745/article/details/78310916</a></p><p>1）.找到FindCUDA.cmake文件</p><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><pre><code class="hljs">  find_cuda_helper_libs(nppial)  find_cuda_helper_libs(nppicc)  find_cuda_helper_libs(nppicom)  find_cuda_helper_libs(nppidei)  find_cuda_helper_libs(nppif)  find_cuda_helper_libs(nppig)  find_cuda_helper_libs(nppim)  find_cuda_helper_libs(nppist)  find_cuda_helper_libs(nppisu)  find_cuda_helper_libs(nppitc)</code></pre><p>2）.找到行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppi_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppial_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicom_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppidei_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppif_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppig_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppim_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppist_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppisu_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppitc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>3）.找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><pre><code class="hljs">unset(CUDA_nppial_LIBRARY CACHE)unset(CUDA_nppicc_LIBRARY CACHE)unset(CUDA_nppicom_LIBRARY CACHE)unset(CUDA_nppidei_LIBRARY CACHE)unset(CUDA_nppif_LIBRARY CACHE)unset(CUDA_nppig_LIBRARY CACHE)unset(CUDA_nppim_LIBRARY CACHE)unset(CUDA_nppist_LIBRARY CACHE)unset(CUDA_nppisu_LIBRARY CACHE)unset(CUDA_nppitc_LIBRARY CACHE)</code></pre><p>4）.cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_fp16.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>完成后即可开始编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> opencv 3.20<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX=/usr/local \<br>-DOPENCV_GENERATE_PKGCONFIG=1  ..<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">make -j4<br>sudo make install<br></code></pre></td></tr></table></figure><p>此时可以通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pkg-config --modversion opencv<br></code></pre></td></tr></table></figure><p>查看到opencv此时的版本已经为3.2，且被装在&#x2F;usr&#x2F;local里</p><h2 id="4-安装ros"><a href="#4-安装ros" class="headerlink" title="4. 安装ros"></a>4. 安装ros</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo sh -c <span class="hljs-string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install curl <br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-melodic-desktop<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzMzI2MTU2Nw==&mid=2247484207&idx=1&sn=e2762a8a9bf9c1a44fea4d365bfc9c2f&chksm=c24e7abff539f3a9d557d46188a6af3e2f385850c0df1721a9f8cb2ac90873e1f7353b9a1282&mpshare=1&scene=1&srcid=1022y7kDVt7kCLa4n1ZXWAZC&sharer_sharetime=1634858167048&sharer_shareid=3e3650f7959dd3017b423b28ebe07cb1&exportkey=A87wEj0Ymq+Hy48ilhHpvCE=&pass_ticket=b+YFCkXlTwiOLyaMziPP63zfarN4dUtbLfxGTLLossTKGDY4HFUk2SKWs4QHZdO0&wx_header=0#rd">rosdepc链接</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install python3-pip <br>sudo pip3 install rosdepc<br>sudo rosdepc init<br>rosdepc update<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roscore<br>rosrun turtlesim turtlesim_node<br></code></pre></td></tr></table></figure><blockquote><p>若是出现问题IOError:[Errno 13]permission denied: &#x2F;home&#x2F;neousys&#x2F;.ros&#x2F;roscore-11311.pid”</p><p>fix: 给文件名加权限即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chmod</span> 777 -R ~/.ros/<br></code></pre></td></tr></table></figure></blockquote><ul><li>安装mavros</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-melodic-mavros ros-melodic-mavros-extras <span class="hljs-comment"># for ros-melodic</span><br>wget https://gitee.com/robin_shaun/XTDrone/raw/master/sitl_config/mavros/install_geographiclib_datasets.sh<br>sudo <span class="hljs-built_in">chmod</span> a+x ./install_geographiclib_datasets.sh<br>sudo ./install_geographiclib_datasets.sh <span class="hljs-comment">#这步需要装一段时间</span><br></code></pre></td></tr></table></figure><h2 id="5-编译VINS-Fusion"><a href="#5-编译VINS-Fusion" class="headerlink" title="5. 编译VINS-Fusion"></a>5. 编译VINS-Fusion</h2><p>依赖还差ceres，版本需要用1.4</p><p>下载<a href="https://github.com/ceres-solver/ceres-solver/archive/refs/tags/1.14.0.zip">https://github.com/ceres-solver/ceres-solver/archive/refs/tags/1.14.0.zip</a></p><p>参考<a href="http://ceres-solver.org/installation.html">http://ceres-solver.org/installation.html</a></p><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install cmake libgoogle-glog-dev libgflags-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev<br></code></pre></td></tr></table></figure><p>编译ceres</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-keyword">cd</span> build<br>cmake ..<br><span class="hljs-keyword">make</span> -j4<br>sudo <span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>编译VINS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs &#123;&#125;">cd ~<br>mkdir catkin_ws<br>cd catkin_ws<br>mkdir src<br>git clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git   # 目录也有<br>cd ..<br>catkin_make<br></code></pre></td></tr></table></figure><blockquote><p>报错cv_bridge的问题，是因为opencv路径</p><p>&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;share&#x2F;cv_bridge&#x2F;cmake&#x2F;cv_bridgeConfig.cmake的113行定义的Opencv的include dir是&#x2F;usr&#x2F;include&#x2F;opencv但是我的openc在&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv&#x2F;</p><p>改了这句话就好了</p><p>  set(_include_dirs “include;&#x2F;usr&#x2F;include;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv”)<br>  #set(_include_dirs “include;&#x2F;usr&#x2F;include;&#x2F;usr&#x2F;include&#x2F;opencv”)</p></blockquote><p>添加环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch vins vins_rviz.launch<br>rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml <br></code></pre></td></tr></table></figure><p>如果没有什么报错，且显示等待图像输入就没问题了。</p><h2 id="6-Realsense配置"><a href="#6-Realsense配置" class="headerlink" title="6. Realsense配置"></a>6. Realsense配置</h2><p>realsense使用的是D455</p><p>sdk即librealsense使用2.50版本，realsense-ros使用2.3.2版本</p><p>step1：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> librealsense-2.50<br></code></pre></td></tr></table></figure><p>step2：安装依赖项（基本前面都安装过）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libudev-dev pkg-config libgtk-3-dev<br>sudo apt-get install libusb-1.0-0-dev pkg-config<br>sudo apt-get install libglfw3-dev<br>sudo apt-get install libssl-dev<br></code></pre></td></tr></table></figure><p>step3：安装权限脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">cp</span> config/99-realsense-libusb.rules /etc/udev/rules.d/<br>sudo udevadm control --reload-rules &amp;&amp; udevadm trigger <br></code></pre></td></tr></table></figure><p>step4：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake ../ -DBUILD_EXAMPLES=<span class="hljs-literal">true</span><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">realsense-viewer<br></code></pre></td></tr></table></figure><p>安装ros包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/catkin_ws/src<br>git <span class="hljs-built_in">clone</span> https://github.com/IntelRealSense/realsense-ros.git  <span class="hljs-comment"># 把2.3.2版本复制进来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/pal-robotics/ddynamic_reconfigure.git<br><span class="hljs-built_in">cd</span> ~/catkin_ws &amp;&amp; catkin_make<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch realsense2_camera rs_camera.launch <br>rqt_image_raw<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PX4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
