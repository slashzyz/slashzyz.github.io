<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从零配置CCM-SLAM，支持五架无人机+RealSense相机</title>
    <link href="/2023/06/29/ccm-5uav/"/>
    <url>/2023/06/29/ccm-5uav/</url>
    
    <content type="html"><![CDATA[<h1 id="ccmslam-5uav"><a href="#ccmslam-5uav" class="headerlink" title="ccmslam_5uav"></a>ccmslam_5uav</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本仓库在CCM-SLAM基础上，进行了改进。在原有最多使用四架无人机的基础上，改进为五架无人机地图融合。</p><p>改进部分主要在ServerSystem, Viewer, MapMatcher等类内进行了新节点实例化。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>Ubuntu 20或18</li><li>OpenCV 3.2</li></ul><h2 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h2><h3 id="1-OpenCV安装"><a href="#1-OpenCV安装" class="headerlink" title="1. OpenCV安装"></a>1. OpenCV安装</h3><p>安装依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>-y <span class="hljs-keyword">build-essential </span>checkinstall cmake pkg-<span class="hljs-built_in">config</span> yasm git gfortran<br>sudo apt <span class="hljs-keyword">install </span>-y libgstreamer1.<span class="hljs-number">0</span>-dev libgstreamer-plugins-<span class="hljs-keyword">base1.0-dev</span><br><span class="hljs-keyword"></span>sudo apt <span class="hljs-keyword">install </span>-y libgstreamer1.<span class="hljs-number">0</span>-dev libgstreamer-plugins-<span class="hljs-keyword">base1.0-dev </span>libgtk2.<span class="hljs-number">0</span>-dev libtbb-dev libatlas-<span class="hljs-keyword">base-dev </span><br></code></pre></td></tr></table></figure><p>下载<a href="https://gitee.com/link?target=https://github.com/opencv/opencv/archive/refs/tags/3.2.0.zip">OpenCV3.2</a></p><p>解压后，完成部分文件修改参考<a href="https://gitee.com/link?target=https://blog.csdn.net/u014613745/article/details/78310916">https://blog.csdn.net/u014613745/article/details/78310916</a></p><p>1）.找到FindCUDA.cmake文件</p><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppial)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppicc)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppicom)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppidei)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppif)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppig)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppim)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppist)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppisu)</span></span><br><span class="hljs-function"><span class="hljs-title">find_cuda_helper_libs</span><span class="hljs-params">(nppitc)</span></span><br></code></pre></td></tr></table></figure><p>2）.找到行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppi_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppial_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicom_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppidei_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppif_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppig_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppim_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppist_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppisu_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppitc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>3）.找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppial_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppicc_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppicom_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppidei_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppif_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppig_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppim_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppist_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppisu_LIBRARY CACHE)</span></span><br><span class="hljs-function"><span class="hljs-title">unset</span><span class="hljs-params">(CUDA_nppitc_LIBRARY CACHE)</span></span><br></code></pre></td></tr></table></figure><p>4）.cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_fp16.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>完成后即可开始编译</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd opencv 3.20<br>mkdir build<br>cd build<br>cmake <span class="hljs-attribute">-DCMAKE_BUILD_TYPE</span>=Release  <span class="hljs-attribute">-DCMAKE_INSTALL_PREFIX</span>=/usr/local \<br><span class="hljs-attribute">-DOPENCV_GENERATE_PKGCONFIG</span>=1  <span class="hljs-built_in">..</span><br>make -j4<br>sudo make install<br></code></pre></td></tr></table></figure><p>此时可以通过</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">pkg-<span class="hljs-built_in">config</span> <span class="hljs-comment">--modversion opencv</span><br></code></pre></td></tr></table></figure><p>查看到opencv此时的版本已经为3.2，且被装在&#x2F;usr&#x2F;local里</p><h3 id="2-ROS安装与配置"><a href="#2-ROS安装与配置" class="headerlink" title="2. ROS安装与配置"></a>2. ROS安装与配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install curl <br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ros-noetic-desktop  <span class="hljs-comment"># 若为ubuntu18则为melodic</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/noetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/link?target=https://mp.weixin.qq.com/s?__biz=MzkzMzI2MTU2Nw==&mid=2247484207&idx=1&sn=e2762a8a9bf9c1a44fea4d365bfc9c2f&chksm=c24e7abff539f3a9d557d46188a6af3e2f385850c0df1721a9f8cb2ac90873e1f7353b9a1282&mpshare=1&scene=1&srcid=1022y7kDVt7kCLa4n1ZXWAZC&sharer_sharetime=1634858167048&sharer_shareid=3e3650f7959dd3017b423b28ebe07cb1&exportkey=A87wEj0Ymq+Hy48ilhHpvCE=&pass_ticket=b+YFCkXlTwiOLyaMziPP63zfarN4dUtbLfxGTLLossTKGDY4HFUk2SKWs4QHZdO0&wx_header=0%23rd">rosdepc链接</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-pip <br>sudo pip3 install rosdepc<br>sudo rosdepc init<br>rosdepc <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">roscore</span><br><span class="hljs-attribute">rosrun turtlesim turtlesim_node</span><br></code></pre></td></tr></table></figure><blockquote><p>若是出现问题IOError:[Errno 13]permission denied: &#x2F;home&#x2F;neousys&#x2F;.ros&#x2F;roscore-11311.pid”</p><p>fix: 给文件名加权限即可</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo chmod <span class="hljs-number">777</span> -R ~<span class="hljs-regexp">/.ros/</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="3-Realsense-ros"><a href="#3-Realsense-ros" class="headerlink" title="3. Realsense-ros"></a>3. Realsense-ros</h3><p><strong>此处已默认nx安装librealsense 2.51</strong></p><p>安装ros包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/catkin_ws/</span>src<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/IntelRealSense/</span>realsense-ros.git  <span class="hljs-comment"># 把2.3.2版本复制进来</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/pal-robotics/</span>ddynamic_reconfigure.git<br>cd ~/catkin_ws &amp;&amp; catkin_make<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">roslaunch realsense2_camera rs_camera.<span class="hljs-built_in">launch</span> <br>rqt_image_raw<br></code></pre></td></tr></table></figure><h3 id="4-cluster-slam配置"><a href="#4-cluster-slam配置" class="headerlink" title="4. cluster-slam配置"></a>4. cluster-slam配置</h3><p>按照下面配置编译代码</p><ul><li><pre><code class="bash">sudo apt-get install python-catkin-tools<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>- ```bash<br>  mkdir -p ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<br>  cd ~/cluster-slam_ws<br>  <span class="hljs-keyword">source</span> <span class="hljs-regexp">/opt/</span>ros<span class="hljs-regexp">/noetic/</span>setup.bash<br>  catkin init<br>  catkin config --extend <span class="hljs-regexp">/opt/</span>ros/noetic<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 代码复制cd cd ~/cluster-slam_ws/srcgit clone https://gitee.com/slashzyz/cluster-slam.git<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```bash<br>  <span class="hljs-comment"># 编译DBoW2库</span><br>  cd ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<span class="hljs-regexp">/cluster-slam/</span>cslam<span class="hljs-regexp">/thirdparty/</span>DBoW2/<br>  mkdir build<br>  cd build<br>  cmake ..<br>  make -j8<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 编译g2o库cd ~/cluster-slam_ws/src/cluster-slam/cslam/thirdparty/g2omkdir buildcd buildcmake --cmake-args -DG2O_U14=0 ..make -j8<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```bash<br>  <span class="hljs-comment"># 解压词典</span><br>  cd ~<span class="hljs-regexp">/cluster-slam_ws/</span>src<span class="hljs-regexp">/cluster-slam/</span>cslam/conf<br>  unzip ORBvoc.txt.zip<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash"># 编译程序代码cd ~/cluster-slam_ws/catkin build ccmslam --cmake-args -DG2O_U14=0 -DCMAKE_BUILD_TYPE=Releasesource ~/cluster-slam_ws/devel/setup.bash<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><br><br><span class="hljs-comment">### 5. 相机配置文件与运行</span><br><br><span class="hljs-comment">#### D435i 相机launch文件配置</span><br><br>打开realsense-ros包下的rs_camera.launch，将其中分辨率<br><br>```xml<br>  &lt;arg <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;color_width&quot;</span>         <span class="hljs-attribute">default</span>=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br>  &lt;arg <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;color_height&quot;</span>        <span class="hljs-attribute">default</span>=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color_width&quot;</span>         <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;424&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color_height&quot;</span>        <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;240&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>将图像频率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;arg name=<span class="hljs-string">&quot;color_fps&quot;</span>           default=<span class="hljs-string">&quot;-1&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;arg name=<span class="hljs-string">&quot;color_fps&quot;</span>           default=<span class="hljs-string">&quot;15&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>为了多机slam融合</p><p>需要对无人机x的相机进行编号，即将其中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;camera&quot;</span>              <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;camera&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;camera&quot;</span>              <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;camerax&quot;</span>/&gt;</span>    <br></code></pre></td></tr></table></figure><p>此处的x表示第几架无人机</p><p>最终为：</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419190853764.png" alt="image-20230419190853764"></p><p><strong>conf文件配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/cluster-slam_ws/src/cslam/conf<br>gedit vi_d455.yaml<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419190955278.png" alt="image-20230419190955278"></p><p>对其中的内参、畸变参数进行修改</p><p>只修改该部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">Camera.fx: 208.875259<br>Camera.fy: 208.628463<br>Camera.cx: 214.399047<br>Camera.cy: 123.552673<br><br>Camera.k1: -0.056723371148109436<br>Camera.k2: 0.07017022371292114<br>Camera.p1: -0.000241746864048764<br>Camera.p2: 0.000677465635817498<br>Camera.k3: -0.0224686115980148<br></code></pre></td></tr></table></figure><p>查询相机参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br>rostopic <span class="hljs-built_in">echo</span> /camera/color/camera_info<br></code></pre></td></tr></table></figure><p>将其中的K的四个、D的五个的参数，覆盖上述参数</p><h4 id="多无人机网络配置"><a href="#多无人机网络配置" class="headerlink" title="多无人机网络配置"></a>多无人机网络配置</h4><p>所有无人机端均需要完整配置一遍以上步骤，最终在pc端运行Server.launch，各个无人机nx上运行Clientx_d435.launch</p><p><strong>！！！保证所有设备在同一网路下，无人机NX上打开终端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>插入(第一行为pc端的ip，通过ifconfig指令查询；第二行为nx端ip，每架无人机不同，查询自己的并输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> ROS_MASTER_URI=http://192.168.xxx.xxx:11311<br><span class="hljs-built_in">export</span> ROS_IP=192.168.xxx.xxx<br></code></pre></td></tr></table></figure><p><strong>！！！注意每台NX均需要完成该步骤</strong></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><strong>相机运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br></code></pre></td></tr></table></figure><p><strong>服务器端运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch ccmslam Server.launch<br>roscd ccmslam<br>rviz -d conf/rviz/ccmslam.rviz<br></code></pre></td></tr></table></figure><p>将rviz中右侧标签栏中MarkerC0、MapPointsC0、MarkerC1、MapPointsC1、MarkerC2、MapPointsC2、MarkerC3、MapPointsC3旁均点亮对钩</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419191326739.png" alt="image-20230419191326739"></p><p><strong>无人机端运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch ccmslam Client0_d435.launch<br></code></pre></td></tr></table></figure><p>此时，对无人机进行<strong>初始化</strong>，即举着无人机进行<strong>轻微的</strong>旋转和平移，知道该终端出现</p><p><img src="https://gitee.com/slashzyz/cluster-slam/raw/master/image/image-20230419191529738.png" alt="image-20230419191529738"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Clientsystem initialized (Client ID: 0)<br>[ INFO] [1681803951.793837487]: Started CSLAM client node...<br>New Map created with 100 points<br></code></pre></td></tr></table></figure><p>表示此时已经初始化完成，并生成了地图点</p><h4 id="多机运行"><a href="#多机运行" class="headerlink" title="多机运行"></a>多机运行</h4><p>多无人机即需要在各自运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch realsense2_camera rs_camera.launch<br>roslaunch ccmslam Clientx_d435.launch<br></code></pre></td></tr></table></figure><p>当前已经支持五架无人机运行，即x可以从0-4运行四个</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jetson NX从零配置VINS+RealSense</title>
    <link href="/2023/06/29/nx-vins/"/>
    <url>/2023/06/29/nx-vins/</url>
    
    <content type="html"><![CDATA[<h1 id="NX配置终极版"><a href="#NX配置终极版" class="headerlink" title="NX配置终极版"></a>NX配置终极版</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>板载计算机使用Jetson Xiaxver NX，本文档作为配置使用</p><h2 id="1-烧录镜像"><a href="#1-烧录镜像" class="headerlink" title="1. 烧录镜像"></a>1. 烧录镜像</h2><ul><li>直接选择我做好的得了</li><li><strong>烧录Ubuntu 18.04.5，nvida官网</strong></li></ul><h2 id="2-换源"><a href="#2-换源" class="headerlink" title="2. 换源"></a>2. 换源</h2><p>更换成中科大的!清华的有问题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#中科大源</span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-updates main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-security main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-backports main restricted universe multiverse <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse </span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic main universe restricted <br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main universe restricted</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update<br></code></pre></td></tr></table></figure><h2 id="3-卸载OpenCV并更换为3-20"><a href="#3-卸载OpenCV并更换为3-20" class="headerlink" title="3. 卸载OpenCV并更换为3.20"></a>3. 卸载OpenCV并更换为3.20</h2><p>项目要求vins定位，但对于3.2版本能用。但jetsonNX此时系统默认安装了OpenCV 4.1，即使参照各种方法编译通过，但运行会有段错误。查了issue，给的解决方法还是建议用3.2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt purge libopencv*<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install -y build-essential checkinstall cmake pkg-config yasm git gfortran<br>sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev<br>sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libtbb-dev libatlas-base-dev <br></code></pre></td></tr></table></figure><p>下载<a href="https://github.com/opencv/opencv/archive/refs/tags/3.2.0.zip">OpenCV3.2</a></p><p>解压后，完成部分文件修改参考<a href="https://blog.csdn.net/u014613745/article/details/78310916">https://blog.csdn.net/u014613745/article/details/78310916</a></p><p>1）.找到FindCUDA.cmake文件</p><p>找到行</p><p>find_cuda_helper_libs(nppi)</p><p>改为</p><pre><code class="hljs">  find_cuda_helper_libs(nppial)  find_cuda_helper_libs(nppicc)  find_cuda_helper_libs(nppicom)  find_cuda_helper_libs(nppidei)  find_cuda_helper_libs(nppif)  find_cuda_helper_libs(nppig)  find_cuda_helper_libs(nppim)  find_cuda_helper_libs(nppist)  find_cuda_helper_libs(nppisu)  find_cuda_helper_libs(nppitc)</code></pre><p>2）.找到行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppi_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span>(CUDA_npp_LIBRARY <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppial_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppicom_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppidei_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppif_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppig_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppim_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppist_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppisu_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_nppitc_LIBRARY&#125;</span>;<span class="hljs-variable">$&#123;CUDA_npps_LIBRARY&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>3）.找到行</p><p>unset(CUDA_nppi_LIBRARY CACHE)</p><p>改为</p><pre><code class="hljs">unset(CUDA_nppial_LIBRARY CACHE)unset(CUDA_nppicc_LIBRARY CACHE)unset(CUDA_nppicom_LIBRARY CACHE)unset(CUDA_nppidei_LIBRARY CACHE)unset(CUDA_nppif_LIBRARY CACHE)unset(CUDA_nppig_LIBRARY CACHE)unset(CUDA_nppim_LIBRARY CACHE)unset(CUDA_nppist_LIBRARY CACHE)unset(CUDA_nppisu_LIBRARY CACHE)unset(CUDA_nppitc_LIBRARY CACHE)</code></pre><p>4）.cuda9中有一个单独的halffloat(cuda_fp16.h)头文件,也应该被包括在opencv的目录里</p><p>将头文件cuda_fp16.h添加至 opencv\modules\cudev\include\opencv2\cudev\common.hpp</p><p>即在common.hpp中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_fp16.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>完成后即可开始编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> opencv 3.20<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX=/usr/local \<br>-DOPENCV_GENERATE_PKGCONFIG=1  ..<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">make -j4<br>sudo make install<br></code></pre></td></tr></table></figure><p>此时可以通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pkg-config --modversion opencv<br></code></pre></td></tr></table></figure><p>查看到opencv此时的版本已经为3.2，且被装在&#x2F;usr&#x2F;local里</p><h2 id="4-安装ros"><a href="#4-安装ros" class="headerlink" title="4. 安装ros"></a>4. 安装ros</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo sh -c <span class="hljs-string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install curl <br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-melodic-desktop<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzMzI2MTU2Nw==&mid=2247484207&idx=1&sn=e2762a8a9bf9c1a44fea4d365bfc9c2f&chksm=c24e7abff539f3a9d557d46188a6af3e2f385850c0df1721a9f8cb2ac90873e1f7353b9a1282&mpshare=1&scene=1&srcid=1022y7kDVt7kCLa4n1ZXWAZC&sharer_sharetime=1634858167048&sharer_shareid=3e3650f7959dd3017b423b28ebe07cb1&exportkey=A87wEj0Ymq+Hy48ilhHpvCE=&pass_ticket=b+YFCkXlTwiOLyaMziPP63zfarN4dUtbLfxGTLLossTKGDY4HFUk2SKWs4QHZdO0&wx_header=0#rd">rosdepc链接</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install python3-pip <br>sudo pip3 install rosdepc<br>sudo rosdepc init<br>rosdepc update<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roscore<br>rosrun turtlesim turtlesim_node<br></code></pre></td></tr></table></figure><blockquote><p>若是出现问题IOError:[Errno 13]permission denied: &#x2F;home&#x2F;neousys&#x2F;.ros&#x2F;roscore-11311.pid”</p><p>fix: 给文件名加权限即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chmod</span> 777 -R ~/.ros/<br></code></pre></td></tr></table></figure></blockquote><ul><li>安装mavros</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-melodic-mavros ros-melodic-mavros-extras <span class="hljs-comment"># for ros-melodic</span><br>wget https://gitee.com/robin_shaun/XTDrone/raw/master/sitl_config/mavros/install_geographiclib_datasets.sh<br>sudo <span class="hljs-built_in">chmod</span> a+x ./install_geographiclib_datasets.sh<br>sudo ./install_geographiclib_datasets.sh <span class="hljs-comment">#这步需要装一段时间</span><br></code></pre></td></tr></table></figure><h2 id="5-编译VINS-Fusion"><a href="#5-编译VINS-Fusion" class="headerlink" title="5. 编译VINS-Fusion"></a>5. 编译VINS-Fusion</h2><p>依赖还差ceres，版本需要用1.4</p><p>下载<a href="https://github.com/ceres-solver/ceres-solver/archive/refs/tags/1.14.0.zip">https://github.com/ceres-solver/ceres-solver/archive/refs/tags/1.14.0.zip</a></p><p>参考<a href="http://ceres-solver.org/installation.html">http://ceres-solver.org/installation.html</a></p><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install cmake libgoogle-glog-dev libgflags-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev<br></code></pre></td></tr></table></figure><p>编译ceres</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-keyword">cd</span> build<br>cmake ..<br><span class="hljs-keyword">make</span> -j4<br>sudo <span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>编译VINS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs &#123;&#125;">cd ~<br>mkdir catkin_ws<br>cd catkin_ws<br>mkdir src<br>git clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git   # 目录也有<br>cd ..<br>catkin_make<br></code></pre></td></tr></table></figure><blockquote><p>报错cv_bridge的问题，是因为opencv路径</p><p>&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;share&#x2F;cv_bridge&#x2F;cmake&#x2F;cv_bridgeConfig.cmake的113行定义的Opencv的include dir是&#x2F;usr&#x2F;include&#x2F;opencv但是我的openc在&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv&#x2F;</p><p>改了这句话就好了</p><p>  set(_include_dirs “include;&#x2F;usr&#x2F;include;&#x2F;usr&#x2F;local&#x2F;include&#x2F;opencv”)<br>  #set(_include_dirs “include;&#x2F;usr&#x2F;include;&#x2F;usr&#x2F;include&#x2F;opencv”)</p></blockquote><p>添加环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch vins vins_rviz.launch<br>rosrun vins vins_node ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml <br></code></pre></td></tr></table></figure><p>如果没有什么报错，且显示等待图像输入就没问题了。</p><h2 id="6-Realsense配置"><a href="#6-Realsense配置" class="headerlink" title="6. Realsense配置"></a>6. Realsense配置</h2><p>realsense使用的是D455</p><p>sdk即librealsense使用2.50版本，realsense-ros使用2.3.2版本</p><p>step1：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> librealsense-2.50<br></code></pre></td></tr></table></figure><p>step2：安装依赖项（基本前面都安装过）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install libudev-dev pkg-config libgtk-3-dev<br>sudo apt-get install libusb-1.0-0-dev pkg-config<br>sudo apt-get install libglfw3-dev<br>sudo apt-get install libssl-dev<br></code></pre></td></tr></table></figure><p>step3：安装权限脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">cp</span> config/99-realsense-libusb.rules /etc/udev/rules.d/<br>sudo udevadm control --reload-rules &amp;&amp; udevadm trigger <br></code></pre></td></tr></table></figure><p>step4：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake ../ -DBUILD_EXAMPLES=<span class="hljs-literal">true</span><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">realsense-viewer<br></code></pre></td></tr></table></figure><p>安装ros包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/catkin_ws/src<br>git <span class="hljs-built_in">clone</span> https://github.com/IntelRealSense/realsense-ros.git  <span class="hljs-comment"># 把2.3.2版本复制进来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/pal-robotics/ddynamic_reconfigure.git<br><span class="hljs-built_in">cd</span> ~/catkin_ws &amp;&amp; catkin_make<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch realsense2_camera rs_camera.launch <br>rqt_image_raw<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/28/hello-world/"/>
    <url>/2023/06/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
